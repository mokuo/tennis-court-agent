version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  ruby: circleci/ruby@1.1.0
  # node: circleci/node@2

jobs:
  build: # our first job, named "build"
    docker:
      - image: cimg/ruby:2.7.1-node # use a tailored CircleCI docker image.
    steps:
      - checkout # pull down our git code.
      - ruby/install-deps # use the ruby orb to install dependencies
      # use the node orb to install our packages
      # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
      # learn more: https://circleci.com/docs/2.0/caching/
      # - node/install-packages:
      #     pkg-manager: yarn
      #     cache-key: "yarn.lock"

  test: # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 1 # NOTE: スクレイピングという性質上、スピードより安定性を取る
    # here we set TWO docker images.
    docker:
      - image: circleci/ruby:2.7.1-node-browsers # this is our primary docker image, where step commands run.
      - image: circleci/mysql:8.0.21
        command: mysqld --default-authentication-plugin=mysql_native_password
        environment: # add POSTGRES environment variables.
          MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          MYSQL_DATABASE: "tennis_court_agent_ci"
          MYSQL_HOST: "127.0.0.1"
          MYSQL_ROOT_HOST: "%"
          MYSQL_USER: "root"

    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - ruby/install-deps
      # - node/install-packages:
      #     pkg-manager: yarn
      #     cache-key: "yarn.lock"
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Database setup
          command: |
            cp -f .circleci/database.ci.yml config/database.yml
            bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test
      - store_artifacts:
          path: tmp/capybara/

# We use workflows to orchestrate the jobs that we declared above.
workflows:
  version: 2
  build_and_test: # The name of our workflow is "build_and_test"
    jobs: # The list of jobs we run as part of this workflow.
      - build # Run build first.
      - test: # Then run test,
          requires: # Test requires that build passes for it to run.
            - build # Finally, run the build job.
