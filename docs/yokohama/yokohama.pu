@startuml start
title start

-> "a Controller"
activate "a Controller"
  "a Controller" -> TreeEventPath: .build
  activate TreeEventPath
    note over TreeEventPath
      ex) "/2020-09-06T14:03:10+09:00"
      using Time.zone.now.to_s(:iso8601)
    end note
  "a Controller" <-- TreeEventPath
  deactivate TreeEventPath

  "a Controller" -> Parks: .all
  activate Parks
  "a Controller" <-- Parks
  deactivate Parks

  "a Controller" -> AvailabilityCheckStarted: .new(path, planned_children)
  activate AvailabilityCheckStarted
    "a Controller" <-- AvailabilityCheckStarted
    "a Controller" -> AvailabilityCheckStarted: ~#publish
    AvailabilityCheckStarted -> AvailabilityCheckStarted: ~#subscribers

    note over "AvailabilityCheckStarted"
      for each subscriber
    end note

    AvailabilityCheckStarted -> "a Subscriber(Proc)": ~#call(self)
    activate "a Subscriber(Proc)"
      "a Subscriber(Proc)" ->
      "a Subscriber(Proc)" <--
    AvailabilityCheckStarted <-- "a Subscriber(Proc)"
    deactivate "a Subscriber(Proc)"
  "a Controller" <-- AvailabilityCheckStarted
  deactivate AvailabilityCheckStarted
<-- "a Controller"
deactivate "a Controller"
@enduml


@startuml job
title Job(Subscriber)

-> "a Subscriber(Proc)"
activate "a Subscriber(Proc)"
  "a Subscriber(Proc)" -> Job: .perform_jobs_later(a TreeEvent)
  note over Job
    for each planed_child
  end note
  Job -> Job: .perform_later(a TreeEventPath)
  "a Subscriber(Proc)" <-- Job
<-- "a Subscriber(Proc)"
deactivate "a Subscriber(Proc)"
...
-> Job: ~#perform(a TreeEventPath)
activate Job
  Job -> "a PageObject": Scraping Request
  activate "a PageObject"
  "a PageObject" --> Job
  deactivate "a PageObject"

  Job -> "a TreeEvent": .new(a TreeEventPath, planned_children)
  activate "a TreeEvent"
    Job <-- "a TreeEvent"
    Job -> "a TreeEvent": ~#publish
    "a TreeEvent" -> "a TreeEvent": ~#subscribers

    note over "a TreeEvent"
      for each subscriber
    end note

    "a TreeEvent" -> "other Subscriber(Proc)": call(path, planed_children)
    activate "other Subscriber(Proc)"
      "other Subscriber(Proc)" ->
      "other Subscriber(Proc)" <--
    "a TreeEvent" <-- "other Subscriber(Proc)"
    deactivate "other Subscriber(Proc)"
  Job <-- "a TreeEvent"
  deactivate "a TreeEvent"
deactivate Job
@enduml



@startuml event_store
title a EventStore(Subscriber)

"a Subscriber(Proc)" -> "TreeEvent": .create!(a TreeEvent)
"a Subscriber(Proc)" <-- "TreeEvent"
@enduml



@startuml status_checker
title a StatusChecker(Subscriber)

-> "a Subscriber(Proc)": call
activate "a Subscriber(Proc)"
  "a Subscriber(Proc)" -> "a StatusChecker": .check(a TreeEvent)
  activate "a StatusChecker"
    note over "a StatusChecker"
      if all event finished
    end note
    "a StatusChecker" -> AvailabilityCheckFinished: .new
    activate AvailabilityCheckFinished
      "a StatusChecker" <-- AvailabilityCheckFinished
      "a StatusChecker" -> AvailabilityCheckFinished: ~#publish
      AvailabilityCheckFinished -> AvailabilityCheckFinished: ~#subscribers

      note over "AvailabilityCheckFinished"
        for each subscriber
      end note

      AvailabilityCheckFinished -> "NotificationJob(Subscriber)": perform_later
      "NotificationJob(Subscriber)" ->: enqueue
      AvailabilityCheckFinished <-- "NotificationJob(Subscriber)"
    "a StatusChecker" <-- AvailabilityCheckFinished
    deactivate AvailabilityCheckFinished
  "a Subscriber(Proc)" <-- "a StatusChecker"
  deactivate "a StatusChecker"
<-- "a Subscriber(Proc)"
deactivate "a Subscriber(Proc)"
@enduml
